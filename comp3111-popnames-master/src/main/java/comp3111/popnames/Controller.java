/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;

import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import comp3111.export.ReportHolder;
/*TO BE SEPARATED */
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.TableView;
import javafx.scene.control.TableColumn;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;


public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;
    
    /*   TASK 1 ELEMENTS   */
    
    @FXML
    private TextField T1_N_TextField;

    @FXML
    private RadioButton T1_male_RadioButton;

    @FXML
    private ToggleGroup T1;

    @FXML
    private RadioButton T1_female_RadioButton;

    @FXML
    private TextField T1_endYear_TextField;

    @FXML
    private TextField T1_startYear_TextField;

    @FXML
    private Button T1_generateReport_Button;
    
    /*   TASK 2 ELEMENTS   */
    
    @FXML
    private Tab tabReport2;

    @FXML
    private ToggleGroup T11;
    
    @FXML
    private TextField T2_endYear_TextField;

    @FXML
    private TextField T2_startYear_TextField;

    @FXML
    private Button T2_generateReport_Button;
    
    @FXML
    private TextField T2_name_TextField;
    
    @FXML
    private RadioButton T2_male_RadioButton;

    /* TASK 3 ELEMENTS */
    
    @FXML
    private Tab tabReport3;

    @FXML
    private RadioButton T3_female_RadioButton;

    @FXML
    private TextField T3_endYear_TextField;

    @FXML
    private TextField T3_startYear_TextField;

    @FXML
    private Button T3_generateReport_Button;

    @FXML 
    private RadioButton T3_male_RadioButton;

    @FXML
    private ToggleGroup T111;

    /* Task 4 */
    
    @FXML
    private Tab tabApp1;
    
    @FXML
    private TextField T4_fatherName_textField;
    
    @FXML
    private TextField T4_fatherYOB_textField;
    
    @FXML
    private TextField T4_motherName_textField;
    
    @FXML
    private TextField T4_motherYOB_textField;
    
    @FXML
    private TextField T4_vintageYear_textField;
    
    /* End Task 4 */
    
    @FXML
    private Button T4_generateReport_button;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;
    
    /* Share Tab */
    
    @FXML
    private Tab tabShare;
    
    @FXML
    private TableView<ReportHolder> share_tableView;
    
    @FXML
    private TableColumn<ReportHolder,Boolean> share_tableView_selectedCol;
    
    @FXML
    private TableColumn<ReportHolder,String> share_tableView_dateCol;
    
    @FXML
    private TableColumn<ReportHolder,String> share_tableView_reportTypeCol;
    
    @FXML
    private TableColumn<ReportHolder,String> share_tableView_inputsCol_nameCol;
    
    @FXML
    private TableColumn<ReportHolder,String> share_tableView_inputsCol_genderCol;
    
    @FXML
    private TableColumn<ReportHolder,String> share_tableView_inputsCol_yearsCol;
    
    @FXML
    private TableColumn<ReportHolder,String> share_tableView_inputsCol_dataTypeCol;
    
    @FXML
    private TableColumn<ReportHolder,String> share_tableView_inputsCol_countryCol;
    
    @FXML
    private Button share_exportButton;
    
    @FXML
    private Button share_selAllButton;
    
    @FXML
    private Button share_selNoneButton;
    
    @FXML
    private Button share_invertSelButton;
    
    /* End Share */
    
    /**
     *  Task Zero
     *  To be triggered by the "Summary" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doSummary() {
    	int year = Integer.parseInt(textfieldYear.getText());
    	String oReport = AnalyzeNames.getSummary(year);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (female)" button on the Task Zero Tab
     *  
     */
    
    @FXML
    void doRankF() {
    	String oReport = "";
    	String iNameF = textfieldNameF.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
    	if (oRank == -1)
    		oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
    	else
    		oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }

    /**
     *  Task Zero
     *  To be triggered by the "Rank (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankM() {
    	String oReport = "";
    	String iNameM = textfieldNameM.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
    	if (oRank == -1)
    		oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
    	else
    		oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopF() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopM() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
    	textAreaConsole.setText(oReport);
    }
    
    /**
     *  Task One
     *  To be triggered by the "Generate Report" button on the Task One Tab
     *  
     */
    @FXML
    void generateTopNNames() {
    	/* Variables */
    	int numOfNames = -1;
    	int startYear = -1;
    	int endYear = -1;
    	String gender;
    	boolean anyErrors = false;
    	String output = "";
    	
    	/*
    	 * 		Input Validation:
    	 * 	T1_N_TextField 			-> 	An integer that is greater than 0.
    	 * 	T1_startYear_TextField 	-> 	An integer that is between 1880 and 2019.
    	 * 	T1_endYear_TextField	->	An integer that is between T1_startYear_TextField 
    	 * 								and 2019 inclusively. ( T1_startYear_TextField has
    	 * 								to be valid first )
    	 * 	T1_male_RadioButton		->	No need to check.
    	 * 	T1_female_RadioButton	->	No need to check.
    	 */
    	// Try block: https://stackoverflow.com/questions/6893958/check-if-a-jtextfield-is-a-number
    	// Handle N
    	try {
    		numOfNames = Integer.parseInt(T1_N_TextField.getText());
    		if(numOfNames < 1) {
    			anyErrors = true;
        		output += "N is less than 1\n";
    		}
    	} catch(NumberFormatException e) {
    		anyErrors = true;
    		output += "N is not an integer.\n";
    	}
    	// Handle start year
    	try {
    		startYear = Integer.parseInt(T1_startYear_TextField.getText());
    		if(startYear > 2019 || startYear < 1880) {
    			anyErrors = true;
        		output += "The start year is out of bounds (1880-2019).\n";
    		}
    	} catch(NumberFormatException e) {
    		anyErrors = true;
    		output += "The start year is not an integer.\n";
    	}
    	// Handle End Year
    	if(startYear != -1) {
    		// Only check the end year if the start year is valid
    		try {
        		endYear = Integer.parseInt(T1_endYear_TextField.getText());
        		if(endYear > 2019 || endYear < startYear) {
        			anyErrors = true;
            		output += String.format("The end year is out of bounds (%d-2019).\n",startYear);
        		}
        	} catch(NumberFormatException e) {
        		anyErrors = true;
        		output += "The end year is not an integer.\n";
        	}
    	}
    	
    	if(!anyErrors) {
    		// All inputs are valid, now to display the desired output.
    		gender = (T1_male_RadioButton.isSelected())?"M":"F";
    		TopNNames results = new TopNNames(startYear, endYear, gender,"usa", "human");
    		this.reportSharer.addReport(results);
    		output += String.format("Top %d Names From %d to %d:\n",numOfNames, startYear, endYear);
    		output += "Rank  Frequency\tName\n";
    		for(int rank = 0; rank < numOfNames; ++rank) {
    			String name = results.getNameFromIndex(rank);
    			if( name.equals("-1")) break;
    			if(name.length() < 6) name+="";
    			output += String.format("%-6d%10d\t\t%s\n",
    					(rank+1),
    					results.getFrequencyFromIndex(rank),
    					name
    				);
    		}
    	}
		textAreaConsole.setText(output);
    }
    
    
    /* TASK 2 */
    @FXML
    void generatePopularityOfName() {
    	/* Variables */
    	String name = T2_name_TextField.getText();
    	int startYear = -1;
    	int endYear = -1;
    	String gender;
    	boolean anyErrors = false;
    	String output = "";
    	
    	try {
    		startYear = Integer.parseInt(T2_startYear_TextField.getText());
    		if(startYear > 2019 || startYear < 1880) {
    			anyErrors = true;
        		output += "The start year is out of bounds (1880-2019).\n";
    		}
    	} catch(NumberFormatException e) {
    		anyErrors = true;
    		output += "The start year is not an integer.\n";
    	}
    	// Handle End Year
    	if(startYear != -1) {
    		// Only check the end year if the start year is valid
    		try {
        		endYear = Integer.parseInt(T2_endYear_TextField.getText());
        		if(endYear > 2019 || endYear < startYear) {
        			anyErrors = true;
            		output += String.format("The end year is out of bounds (%d-2019).\n",startYear);
        		}
        	} catch(NumberFormatException e) {
        		anyErrors = true;
        		output += "The end year is not an integer.\n";
        	}
    	}
    	if(!anyErrors) {
    		// All inputs are valid, now to display the desired output.
    		gender = (T2_male_RadioButton.isSelected())?"M":"F";
    		TopNNames results = new TopNNames(startYear, endYear, gender,"usa", "human");
    		int rank = results.getNameIndex(name);
    		if( rank == -1 ) {
    			output += String.format("Sorry, %s wasnt found between %d and %d\n",name, startYear, endYear);
    		} else {
	    		/*output += String.format("Rank of %s between %d and %d is %d\n", 
	    				name, 
	    				startYear, 
	    				endYear,
	    				rank+1);
	    		*/
    			PopularityOfName namePopularity = new PopularityOfName(startYear, endYear, name, gender, "usa", "human");
	    		output += namePopularity.getReport();
	    		this.reportSharer.addReport(namePopularity);
    		}
    	}
		textAreaConsole.setText(output);
    }
    
    
    /**
    Task 3
    To be Triggered by the Generate report button on Task 3 Tab
    **/
    
    @FXML
    void trendInPopularity() {
    	/* Variables */
    	int startYear = -1;
    	int endYear = -1;
    	String gender;
    	boolean anyErrors = false;
    	String output = "";
    	
    	try {
    		startYear = Integer.parseInt(T3_startYear_TextField.getText());
    		if(startYear > 2019 || startYear < 1880) {
    			anyErrors = true;
        		output += "The start year is out of bounds (1880-2019).\n";
    		}
    	} catch(NumberFormatException e) {
    		anyErrors = true;
    		output += "The start year is not an integer.\n";
    	}
    	// Handle End Year
    	if(startYear != -1) {
    		// Only check the end year if the start year is valid
    		try {
        		endYear = Integer.parseInt(T3_endYear_TextField.getText());
        		if(endYear > 2019 || endYear <= startYear) {
        			anyErrors = true;
            		output += String.format("The end year is out of bounds (%d-2019).\n",startYear+1);
        		}
        	} catch(NumberFormatException e) {
        		anyErrors = true;
        		output += "The end year is not an integer.\n";
        	}
    	}
    	if(!anyErrors) {
    		// All inputs are valid, now to display the desired output.
    		gender = (T3_male_RadioButton.isSelected())?"M":"F";
    		TrendInPopularity2 results = new TrendInPopularity2(startYear, endYear, gender,"usa", "human");
    		this.reportSharer.addReport(results);
    		output += String.format("Top 10 Trending Names From %d to %d:\n", startYear, endYear);
    		output += "Lowest Year : Rank\t\tHighest Year : Rank\t\tName\n";
    		for(int rank = 1; rank <= 10; ++rank) {
    			String name = results.getNthHighestDecrease(rank);
    			int lowYear = results.getWorstGainStartYear(name);
    			int lowRank = results.getRankInYear(name, lowYear);
    			int highYear = results.getWorstGainEndYear(name);
    			int highRank = results.getRankInYear(name, highYear);
    			output += String.format("%-4d\t%-6d : %-5d\t\t\t%-6d : %-5d\t\t\t%s\n", rank,
    					lowYear, lowRank,
    					highYear, highRank,
    					name);
    		}
    		
    		output += String.format("\n\nTop 10 Out of Fashion Names From %d to %d:\n", startYear, endYear);
    		output += "Highest Year : Rank\t\tLowest Year : Rank\t\tName\n";
    		
    		for(int rank = 1; rank <= 10; ++rank) {
    			String name = results.getNthHighestIncrease(rank);
    			int lowYear = results.getBestGainStartYear(name);
    			int lowRank = results.getRankInYear(name, lowYear);
    			int highYear = results.getBestGainEndYear(name);
    			int highRank = results.getRankInYear(name, highYear);
    			output += String.format("%-4d\t%-6d : %-5d\t\t\t%-6d : %-5d\t\t\t%s\n", rank,
    					lowYear, lowRank,
    					highYear, highRank,
    					name);
    		}
    	}
		textAreaConsole.setText(output);
    }
    
    /* Task 4 */
    @FXML
    void generateBabyName() {
    	/* Variables */
    	String output = "";
    	
    	String fatherName = T4_fatherName_textField.getText();
    	String motherName = T4_motherName_textField.getText();
    	int fatherYOB = -1;
    	int motherYOB = -1;
    	int vintageYear = -1;
    	
    	boolean anyErrors = false;
    	//Handle father's YOB
    	try {
    		fatherYOB = Integer.parseInt(T4_fatherYOB_textField.getText());
    		if(fatherYOB > 2019 || fatherYOB < 1880) {
    			anyErrors = true;
        		output += "The father's YOB is out of bounds (1880-2019).\n";
    		}
    	} catch(NumberFormatException e) {
    		anyErrors = true;
    		output += "The father's YOB is not an integer.\n";
    	}
    	//Handle mother's YOB
    	try {
    		motherYOB = Integer.parseInt(T4_motherYOB_textField.getText());
    		if(motherYOB > 2019 || motherYOB < 1880) {
    			anyErrors = true;
        		output += "The mother's YOB is out of bounds (1880-2019).\n";
    		}
    	} catch(NumberFormatException e) {
    		anyErrors = true;
    		output += "The mother's YOB is not an integer.\n";
    	}
    	//Handle vintageYear
    	if (T4_vintageYear_textField.getText().isBlank()) {
    		vintageYear = 2019;
    	}
    	else {
    		try {
	    		vintageYear = Integer.parseInt(T4_vintageYear_textField.getText());
	    		if(vintageYear > 2019 || vintageYear < 1880) {
	    			anyErrors = true;
	        		output += "The vintage year is out of bounds (1880-2019).\n";
	    		}
	    	} catch(NumberFormatException e) {
	    		anyErrors = true;
	    		output += "The vintage year is not an integer.\n";
	    	}
    	}
	    	
    	
    	if(!anyErrors) {
    		// All inputs are valid, now to display the desired output.
    		RecommendBabyName recommendBabyName = new RecommendBabyName(fatherName, motherName, fatherYOB, motherYOB, vintageYear,"usa", "human");
    		output = recommendBabyName.generateReport();
    		this.reportSharer.addReport(recommendBabyName);
    	}
		textAreaConsole.setText(output);
    }
    
    /*Sharing*/
    
    /*Should be a Singleton class for managing the export of reports*/
    class ReportSharing {
    	private ObservableList<ReportHolder> reports;
    	
    	private ReportSharing() {
    		share_tableView_selectedCol.setCellValueFactory(new PropertyValueFactory<>("selected"));
    		share_tableView_selectedCol.setCellFactory(CheckBoxTableCell.forTableColumn(share_tableView_selectedCol));
    		
    		share_tableView_dateCol.setCellValueFactory(new PropertyValueFactory<>("date"));
    		share_tableView_reportTypeCol.setCellValueFactory(new PropertyValueFactory<>("reportType"));
    		share_tableView_inputsCol_nameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
    		share_tableView_inputsCol_genderCol.setCellValueFactory(new PropertyValueFactory<>("gender"));
    		//share_tableView_inputsCol_yearsCol.setCellValueFactory(new PropertyValueFactory<>("years"));
    		share_tableView_inputsCol_dataTypeCol.setCellValueFactory(new PropertyValueFactory<>("dataType"));
    		share_tableView_inputsCol_countryCol.setCellValueFactory(new PropertyValueFactory<>("country"));
    		
    		this.reports = FXCollections.<ReportHolder>observableArrayList();
    		share_tableView.setItems(reports);
    	}
    	public Boolean asdf() {
    		return this.reports.get(0).getSelected();
    	}
    	public void addReport(Reports reportToAdd) {
    		ReportHolder reportHolderToAdd = new ReportHolder(reportToAdd);
    		this.reports.add(0,reportHolderToAdd);
    	}
    	public void selectAll() {
    		for (int i = 0; i < this.reports.size(); ++i)
    			reports.get(i).setSelected(true);
    	}
    	public void selectNone() {
    		for (int i = 0; i < this.reports.size(); ++i)
    			reports.get(i).setSelected(false);
    	}
    	public void invertSelection() {
    		for (int i = 0; i < this.reports.size(); ++i) {
    			Boolean isSelected = reports.get(i).getSelected();
    			reports.get(i).setSelected(!isSelected);
    		}
    	}
    };
    
    private ReportSharing reportSharer;
    
    @FXML
    void debug_pregenerate() {
    	this.reportSharer = new ReportSharing();
    	Reports a = new PopularityOfName(1941, 1945, "Tyrone", "M", "usa", "human");
		Reports b = new PopularityOfName(1920, 1945, "Joe", "M", "usa", "human");
		Reports c = new TopNNames(2000, 2015, "F","usa", "human");
		Reports d = new TrendInPopularity2(2001, 2011, "M","usa", "human");
		Reports e = new TopNNames(1945, 1950, "M","usa", "human");
		this.reportSharer.addReport(a);
		this.reportSharer.addReport(b);
		this.reportSharer.addReport(c);
		this.reportSharer.addReport(d);
		this.reportSharer.addReport(e);
    }
    @FXML
    void share_exportButtonPressed() {
    	this.reportSharer=new ReportSharing();
    	textAreaConsole.setText("pressed export");
    }
    
    @FXML
    void share_selAllButtonPressed() {
    	this.reportSharer.selectAll();
    	textAreaConsole.setText(this.reportSharer.asdf()? "TICKED": "UNTICKED");
    }
    
    @FXML
    void share_selNoneButtonPressed() {
    	this.reportSharer.selectNone();
    	textAreaConsole.setText("pressed select none");
    }
    
    @FXML
    void share_invertSelButtonPressed() {
    	this.reportSharer.invertSelection();
    	textAreaConsole.setText("pressed invert selection");
    }
    
}

